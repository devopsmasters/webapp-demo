node {
    def server
    def buildInfo
    def rtMaven

    def appurl
    def interface1
    def subnetid
    def vpcid
    def region
    def status
    def stackname
    
    stage ('Checkout') {
        task 'Checkout Source Code'
	checkout scm
    }
    stage ('Code Analysis') {	
	task 'Static Code Analysis'
	sh "echo code analysis tool"
    }
    stage ('Run Unit Test and Build Code') {
        task 'Get artifactory repo details'
	// Obtain an Artifactory server instance, defined in Jenkins --> Manage:
        server = Artifactory.server 'local-artifactory'

        rtMaven = Artifactory.newMavenBuild()
        rtMaven.tool = 'maven3' // Tool name from Jenkins configuration
        rtMaven.deployer releaseRepo: 'maven-release-local', snapshotRepo: 'maven-snapshot-local', server: server
        //rtMaven.resolver releaseRepo: 'libs-release-local', snapshotRepo: 'libs-snapshot-local', server: server
        rtMaven.deployer.deployArtifacts = false // Disable artifacts deployment during Maven run
	task 'Run tests and build code'
        buildInfo = Artifactory.newBuildInfo()
        rtMaven.run pom: 'pom.xml', goals: 'install', buildInfo: buildInfo
    }
 
    stage ('Deploy artifacts to Artifactory') {
    	task 'Push build to artifactory'
	rtMaven.deployer.deployArtifacts buildInfo
	task 'Publish Build Info'
        server.publishBuildInfo buildInfo
    }
   
  stage('Deploy Application on Dev Environment') {
  	  
	  appurl = "$server.url/maven-release-local/de/codecentric/springboot-sample-app/0.0.1/springboot-sample-app-0.0.1.war"
          stackname = 'sample-tomcat-app'
	  interface1 = sh(returnStdout: true, script: 'curl --silent http://169.254.169.254/latest/meta-data/network/interfaces/macs/')
	  vpcid = sh(returnStdout: true, script: "curl --silent http://169.254.169.254/latest/meta-data/network/interfaces/macs/$interface1/vpc-id")
	  region1 = sh(returnStdout: true, script: 'curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region').trim()
	  subnetids = sh(returnStdout: true, script: "aws ec2 describe-subnets --filters 'Name=availabilityZone,Values=${region1}b,${region1}c' --query \"Subnets[?VpcId==\'$vpcid\'].SubnetId\" --region $region1 | jq -r 'join(\",\")' ").trim()
          echo "$subnetids"
	  task 'Create application EC2 stack and deploy application'
	  dir ('./aws') {
	    
	     sh """sudo aws cloudformation create-stack --stack-name $stackname --region $region1 --template-body file://Tomcat-app-cfn.yaml \
	           --parameters ParameterKey=KeyName,ParameterValue=rg-newkey ParameterKey=AppURL,ParameterValue=$appurl \
		   ParameterKey=VPCId,ParameterValue=$vpcid ParameterKey=EC2Subnets,ParameterValue=\\\"$subnetids\\\" """
	     
	     sh "sudo aws cloudformation wait stack-create-complete --stack-name $stackname --region $region1"
	  }
  }
    
}
