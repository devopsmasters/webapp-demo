node {
    def server
    def buildInfo
    def rtMaven

    def appurl
    def interface1
    def subnetid
    def vpcid
    def region
    def status
    def stackname
    
    stage('Checkout') {
        /* Let's make sure we have the repository cloned to our workspace */
	    task 'Checkout Source'
	    checkout scm
    }
    stage('Code Analysis') {	
	    task 'Static Code Analysis'
	    sh "echo code analysis tool"
    }
    stage ('Artifactory configuration') {
        // Obtain an Artifactory server instance, defined in Jenkins --> Manage:
        server = Artifactory.server 'local-artifactory'

        rtMaven = Artifactory.newMavenBuild()
        rtMaven.tool = 'maven3' // Tool name from Jenkins configuration
        rtMaven.deployer releaseRepo: 'maven-release-local', snapshotRepo: 'maven-snapshot-local', server: server
        //rtMaven.resolver releaseRepo: 'libs-release-local', snapshotRepo: 'libs-snapshot-local', server: server
        rtMaven.deployer.deployArtifacts = false // Disable artifacts deployment during Maven run

        buildInfo = Artifactory.newBuildInfo()
    }
    stage ('Test') {
    	task 'Run Unit Test'
        rtMaven.run pom: 'pom.xml', goals: 'clean test'
    }
    stage ('Install') {
   	task 'Run Maven Install'
        rtMaven.run pom: 'pom.xml', goals: 'install', buildInfo: buildInfo
    }
 
    stage ('Deploy') {
    	task 'Maven deploy artifacts'
	rtMaven.deployer.deployArtifacts buildInfo
    }
        
    stage ('Publish build info') {
    	task 'Publish BuildInfo to artifactory'
        server.publishBuildInfo buildInfo
    }
   
  stage('Deploy Application') {
  	  
	  appurl = "$server.url/maven-snapshot-local/de/codecentric/springboot-sample-app/0.0.1-SNAPSHOT/springboot-sample-app-0.0.1-20180225.192937-1.war"
          stackname = 'sample-tomcat-app'
	  interface1 = sh(returnStdout: true, script: 'curl --silent http://169.254.169.254/latest/meta-data/network/interfaces/macs/')
	  vpcid = sh(returnStdout: true, script: "curl --silent http://169.254.169.254/latest/meta-data/network/interfaces/macs/$interface1/vpc-id")
	  region1 = sh(returnStdout: true, script: 'curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region')
	  subnetids = sh(returnStdout: true, script: "aws ec2 describe-subnets --filters \"Name=vpc-id,Values=$vpcid,Name=availabilityZone,Values=us-east-1b,Name=availabilityZone,Values=us-east-1c\" --query Subnets.SubnetId --output text --region $region1")
          echo "$subnetids"
	  task 'Deploy application on an EC2 instance'
	  dir ('./aws') {
	    
	      //sh "sudo /usr/bin/cfn-create-or-update --stack-name $stackname --template-body file://Tomcat-app-cfn.yaml --parameters ParameterKey=KeyName,ParameterValue=rg-newkey ParameterKey=EC2Subnets,ParameterValue=$subnetids  ParameterKey=AppURL,ParameterValue=$appurl ParameterKey=VPCId,ParameterValue=$vpcid --region $region1"
	    
	  }
  }
    
}
